{"operators":[{"operatorID":"CSVFileScan-operator-d61df651-6f61-4242-a78b-c77d246e8bc3","operatorType":"CSVFileScan","operatorVersion":"c14deb143ea86b24f718654c929cfd618cbd4503","operatorProperties":{"fileEncoding":"UTF_8","customDelimiter":",","hasHeader":true,"fileName":"/Users/yicong-huang/Downloads/new-dataset_sentiment-ideology-merged.csv","limit":null,"offset":null},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-54b44d72-1944-4769-b0ed-84a3f3f45257","operatorType":"SimpleSink","operatorVersion":"f82d0affafcba93dada5e3d1e9f3367e5b53d037","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"Projection-operator-31401ea9-24ab-4a63-929b-8e6a2a893178","operatorType":"Projection","operatorVersion":"241993a4c41e2a402a0f06e5f6e91202ea3184ce","operatorProperties":{"attributes":[{"originalAttribute":"id","alias":""},{"originalAttribute":"text","alias":""},{"originalAttribute":"created_at","alias":""}]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Projection","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-e6e9797a-fe9d-444a-bc43-1f28f42b9f03","operatorType":"PythonUDFV2","operatorVersion":"f82d0affafcba93dada5e3d1e9f3367e5b53d037","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom pytexera import *\n\nimport spacy\nfrom textblob import TextBlob\n\n# Load SpaCy's English model\nnlp = spacy.load(\"en_core_web_lg\")\n\n# Function to compute average sentiment of sentences\ndef compute_average_sentiment(text):\n    # Initialize S (sum of sentiment) and N (number of sentences)\n    S = 0\n    N = 0\n\n    # Tokenize sentences using SpaCy\n    doc = nlp(text)\n\n    # Iterate over sentences\n    for sentence in doc.sents:\n        # Tokenize the sentence using SpaCy (this is already done by SpaCy in doc.sents)\n        tokens = sentence.text\n\n        # Use TextBlob to calculate sentiment\n        sentiment = TextBlob(tokens).sentiment.polarity\n\n        # Accumulate the sentiment score\n        S += sentiment\n\n        # Increment the number of sentences\n        N += 1\n\n    # Calculate the average sentiment (if there are sentences)\n    if N > 0:\n        average_sentiment = S / N\n    else:\n        average_sentiment = 0\n\n    return average_sentiment\n\nclass ProcessTupleOperator(UDFOperatorV2):\n    \n    @overrides\n    def process_tuple(self, tuple_: Tuple, port: int) -> Iterator[Optional[TupleLike]]:\n        tuple_['sentiment'] = compute_average_sentiment(tuple_['text'])\n        yield tuple_\n# \n# class ProcessBatchOperator(UDFBatchOperator):\n#     BATCH_SIZE = 10 # must be a positive integer\n# \n#     @overrides\n#     def process_batch(self, batch: Batch, port: int) -> Iterator[Optional[BatchLike]]:\n#         yield batch\n# \n# class ProcessTableOperator(UDFTableOperator):\n# \n#     @overrides\n#     def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n#         yield table\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment","attributeType":"double"}],"workers":1},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"spaCy Sentiment","dynamicInputPorts":true,"dynamicOutputPorts":true}],"operatorPositions":{"CSVFileScan-operator-d61df651-6f61-4242-a78b-c77d246e8bc3":{"x":146,"y":192},"SimpleSink-operator-54b44d72-1944-4769-b0ed-84a3f3f45257":{"x":608,"y":198},"Projection-operator-31401ea9-24ab-4a63-929b-8e6a2a893178":{"x":263,"y":194.01040649414062},"PythonUDFV2-operator-e6e9797a-fe9d-444a-bc43-1f28f42b9f03":{"x":416,"y":196.01040649414062}},"links":[{"linkID":"link-6c60682f-973a-4887-9525-2fb2bd658b57","source":{"operatorID":"CSVFileScan-operator-d61df651-6f61-4242-a78b-c77d246e8bc3","portID":"output-0"},"target":{"operatorID":"Projection-operator-31401ea9-24ab-4a63-929b-8e6a2a893178","portID":"input-0"}},{"linkID":"link-301064e5-2a25-4cfc-9271-96a06d82a312","source":{"operatorID":"Projection-operator-31401ea9-24ab-4a63-929b-8e6a2a893178","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-e6e9797a-fe9d-444a-bc43-1f28f42b9f03","portID":"input-0"}},{"linkID":"link-aaa066b4-90a1-40ec-97bf-cbb6b72010c4","source":{"operatorID":"PythonUDFV2-operator-e6e9797a-fe9d-444a-bc43-1f28f42b9f03","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-54b44d72-1944-4769-b0ed-84a3f3f45257","portID":"input-0"}}],"groups":[],"breakpoints":{},"commentBoxes":[]}