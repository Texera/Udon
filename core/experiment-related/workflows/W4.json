{"operators":[{"operatorID":"TextInput-operator-162ec5e1-e593-4b98-b093-e54c26981fdc","operatorType":"TextInput","operatorVersion":"c14deb143ea86b24f718654c929cfd618cbd4503","operatorProperties":{"attributeType":"string","textInput":"/Users/yicong-huang/IdeaProjects/Udon/core/experiment-related/datasets/val2017","attributeName":"","limitHideable":null,"offsetHideable":null},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Text Input","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-fc88c19f-1f8a-4c7e-8578-8272952c47c8","operatorType":"PythonUDFV2","operatorVersion":"f82d0affafcba93dada5e3d1e9f3367e5b53d037","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom pytexera import *\nimport os\nfrom PIL import Image\n\nclass ProcessTupleOperator(UDFOperatorV2):\n    \n    @overrides\n    def process_tuple(self, tuple_: Tuple, port: int) -> Iterator[Optional[TupleLike]]:\n        # Example of how to use the function:\n        folder_path = tuple_['line']  # Path to the image file\n  \n\n        for filename in os.listdir(folder_path):\n            yield {'path': filename, 'image': Image.open(os.path.join(folder_path, filename))}\n        \n    \n# \n# class ProcessBatchOperator(UDFBatchOperator):\n#     BATCH_SIZE = 10 # must be a positive integer\n# \n#     @overrides\n#     def process_batch(self, batch: Batch, port: int) -> Iterator[Optional[BatchLike]]:\n#         yield batch\n# \n# class ProcessTableOperator(UDFTableOperator):\n# \n#     @overrides\n#     def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n#         yield table\n","retainInputColumns":false,"outputColumns":[{"attributeName":"path","attributeType":"string"},{"attributeName":"image","attributeType":"binary"}],"workers":1},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"image loader","dynamicInputPorts":true,"dynamicOutputPorts":true},{"operatorID":"SimpleSink-operator-0dd66725-d9df-40fd-b010-a764a0b3fff8","operatorType":"SimpleSink","operatorVersion":"f82d0affafcba93dada5e3d1e9f3367e5b53d037","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-d659fc8a-5be3-4810-a3a6-442911b152c6","operatorType":"PythonUDFV2","operatorVersion":"f82d0affafcba93dada5e3d1e9f3367e5b53d037","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom pytexera import *\nfrom PIL import Image\n\ndef rotate_image(image, degree):\n    # Get the image dimensions\n    W, H = image.width, image.height\n\n    # Crop the image into two parts as described\n    P1 = image.crop((0, 0, degree, H))  # Left side crop (P1)\n    P2 = image.crop((degree, 0, W, H))  # Right side crop (P2)\n\n    # Create a new blank image to paste the parts into\n    rotated_image = Image.new('RGB', (W, H))\n\n    # Paste the second part (P2) shifted to the left by the degree\n    rotated_image.paste(P2, (W - degree, 0))  # Paste P2\n\n    # Paste the first part (P1) shifted to the right by the degree\n    rotated_image.paste(P1, (0, 0))  # Paste P1\n    \n    return rotated_image\n\nclass ProcessTupleOperator(UDFOperatorV2):\n    \n    @overrides\n    def process_tuple(self, tuple_: Tuple, port: int) -> Iterator[Optional[TupleLike]]:\n        tuple_['image'] = rotate_image(tuple_['image'], 90)\n        yield tuple_\n# \n# class ProcessBatchOperator(UDFBatchOperator):\n#     BATCH_SIZE = 10 # must be a positive integer\n# \n#     @overrides\n#     def process_batch(self, batch: Batch, port: int) -> Iterator[Optional[BatchLike]]:\n#         yield batch\n# \n# class ProcessTableOperator(UDFTableOperator):\n# \n#     @overrides\n#     def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n#         yield table\n","retainInputColumns":true,"outputColumns":[],"workers":1},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Image Rotator","dynamicInputPorts":true,"dynamicOutputPorts":true}],"operatorPositions":{"TextInput-operator-162ec5e1-e593-4b98-b093-e54c26981fdc":{"x":210,"y":34},"PythonUDFV2-operator-fc88c19f-1f8a-4c7e-8578-8272952c47c8":{"x":361,"y":36.010414123535156},"SimpleSink-operator-0dd66725-d9df-40fd-b010-a764a0b3fff8":{"x":710,"y":46},"PythonUDFV2-operator-d659fc8a-5be3-4810-a3a6-442911b152c6":{"x":536,"y":37.630435943603516}},"links":[{"linkID":"link-3812e2f9-790f-42da-93ba-bc32d788e454","source":{"operatorID":"TextInput-operator-162ec5e1-e593-4b98-b093-e54c26981fdc","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-fc88c19f-1f8a-4c7e-8578-8272952c47c8","portID":"input-0"}},{"linkID":"link-b91cd60e-b47f-48c8-9b11-2f86baaad734","source":{"operatorID":"PythonUDFV2-operator-fc88c19f-1f8a-4c7e-8578-8272952c47c8","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-d659fc8a-5be3-4810-a3a6-442911b152c6","portID":"input-0"}},{"linkID":"link-42c114f6-4600-4b69-a497-04116a76e07a","source":{"operatorID":"PythonUDFV2-operator-d659fc8a-5be3-4810-a3a6-442911b152c6","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-0dd66725-d9df-40fd-b010-a764a0b3fff8","portID":"input-0"}}],"groups":[],"breakpoints":{},"commentBoxes":[]}